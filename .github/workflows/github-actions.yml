# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the ASWF Sample Project
#
# Demonstrate a simple multi-platform build using GitHub Actions.
# Ideally should use matrix strategy to avoid code replication but
# unfortunately it's unclear how you can use container:
# only for the Linux platform.

on:
  push:
    branches:
      - master
      - jf_sonarcloud_gha

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CTEST_SOURCE_DIRECTORY: ${{ github.WORKSPACE }}
  CTEST_BUILD_NAME: ${{ github.RUN_ID }}-${{ github.RUN_NUMBER }}
  CTEST_SITE: "GitHub Actions Runner"
  CTEST_CDASH_AUTH_TOKEN: ${{ secrets.CTEST_CDASH_AUTH_TOKEN }}

jobs:
  linux:
    runs-on: ubuntu-latest
    # The aswf/ci-base container includes the SonarCloud tools
    container: 'aswf/ci-base:2020'
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Create build directory
        run: mkdir build
      - name: Build test program
        run: |
          cmake ..
          build-wrapper-linux-x86-64 --out-dir bw-output cmake --build .
        shell: bash
        working-directory: build
      - name: Run test suite
        run: |
          ctest --verbose -S ../CTestScript.cmake
        shell: bash 
        working-directory: build
      - name: Run SonarCloud static analysis and upload results
        run: |
          sonar-scanner
        shell: bash
        working-directory: build

  windows:
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Create build directory
        run: mkdir build
      - name: Build test program
        run: |
          cmake ..
          cmake --build .
        shell: bash
        working-directory: build
      - name: Run test suite
        run: |
          ctest --verbose -S ../CTestScript.cmake
        shell: bash 
        working-directory: build

  macos:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Create build directory
        run: mkdir build
      - name: Build test program
        run: |
          cmake ..
          cmake --build .
        shell: bash
        working-directory: build
      - name: Run test suite
        run: |
          ctest --verbose -S ../CTestScript.cmake
        shell: bash 
        working-directory: build
